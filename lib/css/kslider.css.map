{"version":3,"file":"kslider.css","sources":["kslider.scss","_mixins.scss","_variables-demo.scss"],"sourcesContent":["@import url('https://fonts.googleapis.com/css?family=Thasadith');\n@import \"mixins\";\n@import 'variables-demo';\n\n.kslider-wrapper {\n  display: block;\n  margin: 0 auto;\n  position: relative;\n  @media (max-width: 480px) {\n    max-width: 100%;\n  }\n}\n\n.kslider {\n  display: block;\n  margin: 0 auto;\n  width: 960px;\n  height: auto;\n  max-width: 100%;\n  box-shadow: 1px 5px 10px rgba(0, 0, 0, 0.5);\n  padding: 0;\n  list-style-type: none;\n}\n\n.kslider li {\n  display: none;\n  position: absolute;\n  margin: 0;\n}\n\n.kslider li.active {\n  display: block;\n}\n\n.kslider li img {\n  max-width: 100%;\n}\n\n.kslider-alt {\n  display: block;\n  position: absolute;\n  top: 25px;\n  left: 25px;\n  padding: 5px 10px;\n  background: rgba(0, 0, 0, 0.5);\n  text-transform: uppercase;\n  font-size: 1rem;\n  color: $color_1;\n  @media (max-width: 480px) {\n    font-size: 0.75rem;\n    top: 10px;\n    left: 10px;\n  }\n}\n\n/* Navigation */\n.kslider-nav {\n  position: absolute;\n  top: 0;\n  width: 100px;\n  height: 100%;\n  font-size: 2.5rem;\n  opacity: 0;\n  @include transition(all 0.3s ease-in-out);\n  &.nav-left, &.nav-right {\n    & a {\n      display: none;\n      position: relative;\n      text-align: center;\n      top: 40%;\n      color: $color_1;\n    }\n  }\n  &.nav-left {\n    left: 0;\n  }\n  &.nav-right {\n    right: 0;\n  }\n  &:hover {\n    cursor: pointer;\n    opacity: 1;\n    &.nav-left, &.nav-right {\n      & a {\n        display: block;\n      }\n    }\n  }\n}\n\n/* Bullets list */\n.kslider-bullets-wrapper {\n  position: absolute;\n  bottom: 2.50%;\n  width: 100%;\n}\n\n.kslider-bullets {\n  position: relative;\n  width: 200px;\n  text-align: center;\n  padding-left: 0;\n  margin: 0 auto;\n  & li {\n    display: inline-block;\n    & .icon-circle {\n      color: $color_12;\n    }\n    & .icon-circle-empty {\n      color: $color_1;\n    }\n  }\n}","////\n/// Andy.SCSS: Open-Source Collection of Useful SASS Mixins Library.\n/// URL: http://gillesbertaux.com/andy$\n/// Repository: https://github.com/gillesbertaux/andy\n/// By: Gilles Bertaux | http://gillesbertaux.com | @gillesbertaux\n/// The purpose of Andy is to gather useful mixins and avoid endless research\n/// or heavy framework use. Feel free to fork it on Github and add your own mixins:\n////\n\n\n/// Base font size setting for Andy\n/// @access public\n/// @type Length\n$base-font-size: 16px !default;\n\n\n/// Mixin helper to output vendor-prefixed CSS\n/// @access private\n/// @author HugoGiraudel\n/// @param {String} $property - Unprefixed CSS property\n/// @param {*} $value - Raw CSS value\n/// @param {List} $prefixes [()] - List of prefixes to output\n@mixin prefix($property, $value, $prefixes: ()) {\n  @each $prefix in $prefixes {\n    -#{$prefix}-#{$property}: $value;\n  }\n\n  #{$property}: $value;\n}\n\n\n/// Mixin helper to prefix `@keyframes`\n/// @access private\n/// @param {String} $name - Animation name\n@mixin keyframes($name) {\n  @-webkit-keyframes #{$name} {\n    @content;\n  }\n\n  @keyframes #{$name} {\n    @content;\n  }\n}\n\n\n/// Function helper to strip a single character from a string; by default, simply removes the character.\n/// @access private\n/// @param {String} $string - The string to alter.\n/// @param {String} $to-replace - The character to check for.\n/// @param {String} $replacement [''] - The character to replace the removed character with.\n/// @example scss - Usage {\n///   .foo:after {\n///     content: str-replace('Hello.', '.', '!');\n///   }\n/// @example css - Result\n///   .foo:after {\n///     content: 'Hello!'\n///   }\n@function str-replace($string, $to-replace, $replacement:'') {\n  $target-location: str-index($string, $to-replace);\n  @if $target-location == null { @return $string; }\n  $string-without-target: str-slice($string, 1, $target-location - 1) + str-slice($string, $target-location + 1);\n  $string: str-insert($string-without-target, $replacement, $target-location);\n  @return $string;\n}\n\n\n/// Background gradient helper\n/// @access public\n/// @param {Color} $start-color - Start color\n/// @param {Color} $end-color - End color\n/// @param {String} $orientation - Type of gradient, either `vertical`, `horizontal` or `radial`\n/// @example scss - Usage\n///   .foo {\n///     @include background-gradient(red, black, 'vertical');\n///   }\n/// @example css - Result\n///   .foo {\n///     background: -webkit-linear-gradient(top, red, black);\n///     background: linear-gradient(to bottom, red, black);\n///   }\n@mixin background-gradient($start-color, $end-color, $orientation) {\n  background: $start-color;\n  @if $orientation == 'vertical' {\n    background: -webkit-linear-gradient(top, $start-color, $end-color);\n    background: linear-gradient(to bottom, $start-color, $end-color);\n  } @else if $orientation == 'horizontal' {\n    background: -webkit-linear-gradient(left, $start-color, $end-color);\n    background: linear-gradient(to right, $start-color, $end-color);\n  } @else {\n    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);\n    background: radial-gradient(ellipse at center, $start-color, $end-color);\n  }\n}\n\n\n/// Background size helper\n/// @access public\n/// @param {Length} $width - Background width\n/// @param {Length} $height [$width] - Background height\n/// @example scss - Usage\n///   .foo {\n///     @include background-size(100%);\n///   }\n/// @example scss - Result\n///   .foo {\n///     -webkit-background-size: 100% 100%;\n///     -moz-background-size: 100% 100%;\n///     background-size: 100% 100%;\n///   }\n@mixin background-size($width, $height: $width) {\n  @include prefix(background-size, $width $height, 'webkit' 'moz');\n}\n\n///\n///\n@mixin border-radius($radius : 5px) {\n  @include prefix(border-radius, $radius, 'webkit' 'moz');\n  @include prefix(background-clip, 'padding', 'moz');\n  @include prefix(background-clip, 'padding-box', 'webkit');\n}\n\n/// Separated border-radius helpers\n/// @access public\n/// @param {Length} $top-left-radius - Top left radius\n/// @param {Length} $top-right-radius - Top right radius\n/// @param {Length} $bottom-right-radius - Bottom right radius\n/// @param {Length} $bottom-left-radius - Bottom left radius\n/// @example scss - Usage\n///   .foo {\n///     @include border-radius-separate(1px, 2px, 3px, 4px);\n///   }\n/// @example css - Result\n///   .foo {\n///     -webkit-border-top-left-radius: 1px;\n///     -moz-border-top-left-radius: 1px;\n///     border-top-left-radius: 1px;\n///     -webkit-border-top-right-radius: 2px;\n///     -moz-border-top-right-radius: 2px;\n///     border-top-right-radius: 2px;\n///     -webkit-border-bottom-right-radius: 3px;\n///     -moz-border-bottom-right-radius: 3px;\n///     border-bottom-right-radius: 3px;\n///     -webkit-border-bottom-left-radius: 4px;\n///     -moz-border-bottom-left-radius: 4px;\n///     border-bottom-left-radius: 4px;\n///   }\n@mixin border-radius-separate($top-left-radius, $top-right-radius, $bottom-right-radius, $bottom-left-radius) {\n  @include prefix(border-top-left-radius, $top-left-radius, 'webkit' 'moz');\n  @include prefix(border-top-right-radius, $top-right-radius, 'webkit' 'moz');\n  @include prefix(border-bottom-right-radius, $bottom-right-radius, 'webkit' 'moz');\n  @include prefix(border-bottom-left-radius, $bottom-left-radius, 'webkit' 'moz');\n}\n\n\n/// Box-sizing helper\n/// @access public\n/// @param {String} $type - Either `border-box`, `padding-box` or `content-box`\n/// @example scss - Usage\n///   .foo {\n///     @include box-sizing(border-box);\n///   }\n/// @example css - Result\n///   .foo {\n///     -moz-box-sizing: border-box;\n///     box-sizing: border-box;\n///   }\n@mixin box-sizing($type) {\n  @include prefix(box-sizing, $type, 'moz');\n}\n\n\n/// Horizontally centers block elements\n/// @access public\n/// @example scss - Usage\n///   .foo {\n///     @include center-block;\n///   }\n/// @example css - Result\n///   .foo {\n///     display: block;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n@mixin center-block {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n\n/// Horizontally and vertically centers block elements\n/// Important: you must have a parent element with `position: relative`.\n/// @access public\n/// @example scss - Usage\n///   .foo {\n///     @include center-both;\n///   }\n/// @example css - Result\n///   .foo {\n///     position: absolute;\n///     top: 50%;\n///     left: 50%;\n///     -webkit-transform: translate(-50%, -50%);\n///     -ms-transform: translate(-50%, -50%);\n///     transform: translate(-50%, -50%);\n///   }\n@mixin center-both {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  @include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');\n}\n\n\n/// Vertically centers block elements with known height.\n/// @access public\n/// @param {Length} $height - Element's height\n/// @example scss - Usage\n///   .foo {\n///     @include center-h(42px);\n///   }\n/// @example css - Result\n///   .foo {\n///     position: absolute;\n///     top: 50%;\n///     height: 42px;\n///     margin-top: -21px;\n///   }\n@mixin center-h($height) {\n  position: absolute;\n  top: 50%;\n  height: $height;\n  margin-top: -($height / 2);\n}\n\n/// Vertically centers block elements with unknown height.\n/// @access public\n/// @example scss - Usage\n///   .foo {\n///     @include center-h--unk;\n///   }\n/// @example css - Result\n///   .foo {\n///     position: relative;\n///     top: 50%;\n///     -webkit-transform: translateY(-50%);\n///     -ms-transform: translateY(-50%);\n///     transform: translateY(-50%);\n///   }\n@mixin center-h--unk {\n  position: relative;\n  top: 50%;\n  @include prefix(transform, translateY(-50%), 'webkit' 'ms');\n}\n\n\n/// Clearfix extend\n/// @access public\n/// @example scss - Usage\n///   .foo {\n///     @extend %clearfix;\n///   }\n%clearfix {\n  *zoom: 1;\n\n  &:before, &:after {\n    content: ' ';\n    display: table;\n  }\n\n  &:after {\n    clear: both;\n  }\n}\n\n\n/// Adds a thin black line above the element, and a thin gray line below the element, creating an inlay effect.\n/// @access public\n/// @example scss - Usage\n///   .foo {\n///     @include outline;\n///   }\n/// @example css - Result\n///   .foo {\n///     box-shadow: rgba(255, 255, 255, 0.5) 0 1px 0, inset rgba(0, 0, 0, 0.75) 0 1px 0;\n///   }\n@mixin outline {\n  box-shadow: rgba(255, 255, 255, 0.5) 0 1px 0, inset rgba(0, 0, 0, 0.75) 0 1px 0;\n}\n\n\n/// Given the location of a webfont, will generate a font-face declaration with multiple file formats.\n/// @access public\n/// @param {String} $font-name - Font family name\n/// @param {String} $file-name - File name (no extension)\n/// @param {String | Number} $weight [normal] - Font weight\n/// @param {String} $style [normal] - Font style\n/// @example scss - Usage\n///   @include font-face('gotham', '/fonts/gotham');\n@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {\n  @font-face {\n    font-family: quote($font-name);\n    src: url($file-name + '.eot');\n    src: url($file-name + '.eot?#iefix')  format('embedded-opentype'),\n    url($file-name + '.woff') format('woff'),\n    url($file-name + '.ttf')  format('truetype'),\n    url($file-name + '.svg##{$font-name}')  format('svg');\n    font-weight: $weight;\n    font-style: $style;\n  }\n}\n\n\n/// Given a font size in pixels, reproduces that font size in rems.\n/// @access public\n/// @param {Length} $size - Font size\n/// @example scss - Usage\n///   .foo {\n///     @include font-size(16px);\n///   }\n/// @example css - Result\n///   .foo {\n///     font-size: 16px;\n///     font-size: 1rem;\n///   }\n@mixin font-size($size) {\n  @if unitless($size) {\n    $size: $size * 1px;\n  }\n\n  font-size: $size;\n  font-size: ($size / $base-font-size) * 1rem;\n}\n\n\n/// Forces browsers to use hardware acceleration for transforms\n/// @access public\n/// @example scss - Usage\n///   .foo {\n///     @include ha;\n///   }\n/// @example css - Result\n///   .foo {\n///     -webkit-transform: translate3d(0, 0, 0);\n///     -moz-transform: translate3d(0, 0, 0);\n///     transform: translate3d(0, 0, 0);\n///   }\n@mixin ha {\n  @include prefix(transform, translate3d(0, 0, 0), 'webkit' 'ms');\n}\n\n\n/// Retina image media query helper; given an image path with a 2x-sized version of an image, will load that image as a background-image on high-resolution devices.\n/// @access public\n/// @param {String} $image - Image path\n/// @param {Length} $width - Image width\n/// @param {Height} $height - Image height\n/// @example scss - Usage\n///   .foo {\n///     @include image-2x('../images/image.png', 100%, auto);\n///   }\n@mixin image-2x($image, $width, $height) {\n  @media (-webkit-min-device-pixel-ratio: 1.3),\n  (min-resolution: 124dpi),\n  (min-resolution: 1.3dppx) {\n    /* on retina, use image that's scaled by 2 */\n    background-image: url($image);\n    background-size: $width $height;\n  }\n}\n\n\n/// Generates line-height values in both pixels and rems.\n/// @access public\n/// @param {Number} $height-value [12] - Height value\n/// @example scss - Usage\n///   .foo {\n///     @include line-height(16);\n///   }\n/// @example css - Result\n///   .foo {\n///     line-height: 16px;\n///     line-height: 1rem;\n///   }\n@mixin line-height($height-value: 12) {\n  line-height: $height-value * 1px; //fallback for old browsers\n  line-height: (1 / ($base-font-size / ($base-font-size * 0 + 1)) * $height-value * 1rem);\n}\n\n\n/// Media query helper for declaring media queries by width, and, optionally, ratio.\n/// @access public\n/// @param {Length} $width - Max-width\n/// @param {Number | False} $ratio [false] - Min device pixel ratio\n/// @example scss - Usage\n///   .foo {\n///     @include mquery(350px, 2) {\n///       width: 100%;\n///     }\n///   }\n@mixin mquery($width, $ratio: false) {\n  @if $ratio {\n    @media\n    only screen and (max-width: $width) and  (min--moz-device-pixel-ratio: $ratio),\n    only screen and (max-width: $width) and  (-webkit-min-device-pixel-ratio: $ratio),\n    only screen and (max-width: $width) and  (min-device-pixel-ratio: $ratio) {\n      @content;\n    }\n  } @else {\n    @media only screen and (max-width: $width) {\n      @content;\n    }\n  }\n}\n\n\n/// Media query helper for declaring media queries by device pixel ratio.\n/// @access public\n/// @param {Number} $ratio - Min device pixel ratio\n/// @example scss - Usage\n///   .foo {\n///     @include mquery-r(2) {\n///       width: 100%;\n///     }\n///   }\n@mixin mquery-r($ratio) {\n  @media\n  only screen and (-webkit-min-device-pixel-ratio: $ratio),\n  only screen and (min--moz-device-pixel-ratio: $ratio),\n  only screen and (-o-min-device-pixel-ratio: $ratio),\n  only screen and (min-device-pixel-ratio: $ratio) {\n    @content;\n  }\n}\n\n\n/// Given an opacity value, generates that value as well as a way to display that opacity value in Internet Explorer 8 and 9.\n/// @access public\n/// @param {Float} $opacity - Opacity\n/// @example scss - Usage\n///   .foo {\n///     @include opacity(0.5);\n///   }\n/// @example css - Result\n///   .foo {\n///     opacity: 0.5;\n///     filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=#50)\";\n///   }\n@mixin opacity($opacity) {\n  opacity: $opacity;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})\";\n}\n\n\n/// Generates the color black, with, optionally, a set opacity.\n/// @access public\n/// @param {Float} $opacity - Opacity\n/// @example scss - Usage\n///   .foo {\n///     border-color: black(0.1);\n///   }\n/// @example css - Result\n///   .foo {\n///     border-color: rgba(0, 0, 0, 0.1);\n///   }\n@function black($opacity) {\n  @return rgba(0, 0, 0, $opacity);\n}\n\n\n/// Generates the color white, with, optionally, a set opacity.\n/// @access public\n/// @param {Float} $opacity - Opacity\n/// @example scss - Usage\n///   .foo {\n///     border-color: white(0.1);\n///   }\n/// @example css - Result\n///   .foo {\n///     border-color: rgba(255, 255, 255, 0.1);\n///   }\n@function white($opacity) {\n  @return rgba(255, 255, 255, $opacity);\n}\n\n\n/// Shorthandizes position declarations.\n/// @access public\n/// @param {String} $type - Either `relative`, `absolute` or `fixed`\n/// @param {Length} $left [null] - Left offset\n/// @param {Length} $right [null] - Right offset\n/// @param {Length} $top [null] - Top offset\n/// @param {Length} $bottom [null] - Bottom offset\n/// @example scss - Usage\n///   .foo {\n///     @include position(absolute, $top: 10px, $left: 10px);\n///   }\n/// @example css - Result\n///   .foo {\n///     position: absolute;\n///     left: 10px;\n///     top: 10px;\n///   }\n@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {\n  position: $type;\n  top: $top;\n  right: $right;\n  bottom: $bottom;\n  left: $left;\n}\n\n\n/// Sizing helper\n/// @access public\n/// @param {Length} $width - Width\n/// @param {Length} $height [$width] - Height\n/// @example scss - Usage\n///   .foo {\n///     @include size(350px);\n///   }\n/// @example css - Result\n///   .foo {\n///     width: 350px;\n///     height: 350px;\n///   }\n@mixin size($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n\n/// Embossing text shadow\n/// @access public\n/// @param {Float} $value - Opacity value\n/// @example scss - Usage\n///   .foo {\n///     @include text-shadow(0.5);\n///   }\n/// @example css - Result\n///   .foo {\n///     text-shadow: rgba(255, 255, 255, 0.5) 0 1px 0;\n///   }\n@mixin text-shadow($value) {\n  text-shadow: rgba(255, 255, 255, $value) 0 1px 0;\n}\n\n\n/// Automatically prefix any transform\n/// @access public\n/// @param {String} $transformation - The transform to apply\n/// @example scss - Usage\n///   .foo {\n///     @include transform(translateX(10px));\n///   }\n/// @example css - Result\n///   .foo {\n///     -webkit-transform: translateX(10px);\n///     -ms-transform: translateX(10px);\n///     transform: translateX(10px);\n///   }\n@mixin transform($transformation){\n  @include prefix(transform, $transformation, 'webkit' 'ms');\n}\n\n\n/// Transition helper\n/// @param {Time} $time [1s] - Duration\n/// @param {String} $timing-function [ease-in-out] - Timing function or cubic bezier curve\n/// @example scss - Usage\n///   .foo {\n///     @include transition(0.3s, ease-in);\n///   }\n/// @example css - Result\n///   .foo {\n///     -webkit-transition: all 0.3s ease-in;\n///     transition: all 0.3s ease-in;\n///   }\n@mixin transition($time: 1s, $timing-function: ease-in-out) {\n  @include prefix(transition, all $time $timing-function, 'webkit');\n}\n\n\n/// Generates a grow-then-shrink (or shrink-then-grow) animation using transform(scale).\n/// @access public\n/// @param {Number} $scale-change [1.1] - The amount to scale by.\n/// @param {List} $animation-properties - Animation properties to apply.\n/// @example scss - Usage\n///   .foo {\n///     @include scale(0.5, 3s ease infinite alternate);\n///   }\n/// @example css - Result\n///   .foo {\n///     -webkit-animation: \"scale-0-5\" 3s ease infinite alternate;\n///     animation: \"scale-0-5\" 3s ease infinite alternate;\n///   }\n///  // -webkit- prefixed @keyframes are also generated\n///  @keyframes scale-0-5 {\n///    from, to {\n///      -webkit-transform: scale(1);\n///      -ms-transform: scale(1);\n///      transform: scale(1);\n///    }\n///    50% {\n///      -webkit-transform: scale(0.5);\n///      -ms-transform: scale(0.5);\n///      transform: scale(0.5);\n///    }\n///  }\n@mixin scale($scale-change:1.1, $animation-properties: 1s ease-in-out) {\n  $alias: 'scale-' + str-replace($scale-change + '', '.', '-');\n\n  @include keyframes($alias){\n    0%, 100% {\n      @include transform(scale(1));\n    }\n    50% {\n      @include transform(scale($scale-change));\n    }\n  }\n\n  @include prefix(animation, $alias $animation-properties, 'webkit');\n}\n\n\n/// Given two opacity values, animates an element between those opacity values.\n/// @access public\n/// @param {Number} $fade-from [0] - The beginning opacity value.\n/// @param {Number} $fade-to [1] - The final opacity value.\n/// @param {List} $animation-properties [1s ease] - The animation properties to apply.\n/// @example scss - Usage\n///   .foo {\n///     @include fade(.8, .2, 3s linear);\n///   }\n/// @example css - Result\n///   .foo {\n///     -webkit-animation: fade-0-8-0-2 3s linear;\n///     animation: fade-0-8-0-2 3s linear;\n///   }\n/// // (the @keyframes are also generated with a -webkit- vendor prefix)\n///   @keyframes fade-0-8-0-2 {\n///     from {\n///       opacity: 0.8;\n///       -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";\n///     }\n///     to {\n///       opacity: 0.2;\n///       -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\";\n///     }\n///   }\n@mixin fade($fade-from: 0, $fade-to: 1, $animation-properties: 1s ease) {\n  $alias: fade- + str-replace($fade-from + '', '.', '-') + '-' + str-replace($fade-to + '', '.', '-');\n  @include keyframes($alias){\n    from {\n      @include opacity($fade-from);\n    }\n    to {\n      @include opacity($fade-to);\n    }\n  }\n  @include prefix(animation, $alias $animation-properties, 'webkit');\n}\n\n\n/// Slide-in-from creates and calls an animation that slides an element on a given axis for a given amount of space. The offset is measured in the distance from the location the element would naturally fall in, were transforms not applied to it.\n/// @access public\n/// @param {String} $slide-axis [x] - The axis on which to slide; 'x' or 'y'.\n/// @param {Length} $slide-offset [-100px] - The offset from the natural element position from which to begin the animation.\n/// @param {List} $animation-properties [3s ease-out] - Any animation properties to be included.\n/// @example scss - Usage\n///   .foo {\n///     @include slide-in-from(y, -200px, 3s ease alternate infinite);\n///   }\n/// @example css - Result\n///   .foo {\n///     -webkit-animation: slide-in-y--200px 3s linear infinite alternate;\n///     animation: slide-in-y--200px 3s linear infinite alternate;\n///   }\n///\n/// // (the @keyframes are also generated with a -webkit- vendor prefix)\n///   @keyframes slide-in-y--200px {\n///     0% {\n///       opacity: 0;\n///       -webkit-transform: translateY(-200px);\n///       -ms-transform: translateY(-200px);\n///       transform: translateY(-200px);\n///     }\n///     75% {\n///       -webkit-transform: translateY(0);\n///       -ms-transform: translateY(0);\n///       transform: translateY(0);\n///     }\n///     100% {\n///       opacity: 1;\n///     }\n///   }\n@mixin slide-in-from($slide-axis: x, $slide-offset: -100px, $animation-properties: 3s ease-out) {\n  $slide-start: if($slide-axis == x, translateX($slide-offset), translateY($slide-offset));\n  $slide-end: if($slide-axis == x, translateX(0), translateY(0));\n\n  @include keyframes(slide-in-#{$slide-axis}-#{$slide-offset}){\n    0% {\n      @include opacity(0);\n      @include transform($slide-start);\n    }\n    75% {\n      @include transform($slide-end);\n    }\n    100% {\n      @include opacity(1);\n    }\n  }\n\n  @include prefix(animation, slide-in-#{$slide-axis}-#{$slide-offset} $animation-properties, 'webkit');\n}\n\n///\n///\n///\n@mixin skew ($deg, $deg2) {\n  -webkit-transform: skew($deg, $deg2);\n  -moz-transform: skew($deg, $deg2);\n  -ms-transform: skew($deg, $deg2);\n  -o-transform: skew($deg, $deg2);\n}\n\n///\n///\n///\n@mixin scale ($factor) {\n  -webkit-transform: scale($factor);\n  -moz-transform: scale($factor);\n  -ms-transform: scale($factor);\n  -o-transform: scale($factor);\n}\n\n///\n///\n///\n@mixin rotate ($deg) {\n  -webkit-transform: rotate($deg);\n  -moz-transform: rotate($deg);\n  -ms-transform: rotate($deg);\n  -o-transform: rotate($deg);\n}\n\n///\n///\n///\n@mixin translate ($x, $y : 0) {\n  -webkit-transform: translate($x, $y);\n  -moz-transform: translate($x, $y);\n  -ms-transform: translate($x, $y);\n  -o-transform: translate($x, $y);\n}\n\n///\n///\n///\n@mixin translate3d ($x, $y : 0, $z : 0) {\n  -webkit-transform: translate3d($x, $y, $z);\n  -moz-transform: translate3d($x, $y, $z);\n  -ms-transform: translate3d($x, $y, $z);\n  -o-transform: translate3d($x, $y, $z);\n}\n\n///\n///\n///\n@mixin gradient ($startColor: #eee, $endColor: white) {\n  background-color: $startColor;\n  background: -webkit-gradient(linear,left top,left bottom,color-stop(0,$startColor),color-stop(100%,$endColor));\n  background: -webkit-linear-gradient(top, $startColor 0, $endColor 100%);\n  background: -moz-linear-gradient(top, $startColor 0, $endColor 100%);\n  background: -ms-linear-gradient(top, $startColor 0, $endColor 100%);\n  background: -o-linear-gradient(top, $startColor 0, $endColor 100%);\n  background: linear-gradient(to bottom,$startColor 0,$endColor 100%);\n  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{startColor}', endColorstr='@{endColor}', GradientType=0 );\n}\n\n///\n///\n///\n@mixin horizontal-gradient ($startColor: #eee, $endColor: white) {\n  background-color: $startColor;\n  background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));\n  background-image: -webkit-linear-gradient(left, $startColor, $endColor);\n  background-image: -moz-linear-gradient(left, $startColor, $endColor);\n  background-image: -ms-linear-gradient(left, $startColor, $endColor);\n  background-image: -o-linear-gradient(left, $startColor, $endColor);\n}","// Completer inputs variables\n$color_0: #333;\n$color_1: #dfdfdf;\n$color_2: #fff;\n$color_3: #f2f2f2;\n$color_4: #e55050;\n$color_5: #c0c0c0;\n$color_10: #435A6B;\n$color_11: #233D4D;\n$color_12: #e2e2e2;\n\n// Demo inputs variables\n$color_6: lighten(#1e1e1e, 5%);\n$color_7: #89867E;\n$color_8: #666;\n$color_9: #777;\n\n$font-base: 'Open Sans', Helvetica, Geneva, Tahoma, sans-serif;\n$font-alt: 'Montserrat', Helvetica, Geneva, Tahoma, sans-serif;"],"names":[],"mappings":"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"}